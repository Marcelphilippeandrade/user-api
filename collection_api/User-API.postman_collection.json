{
	"info": {
		"_postman_id": "219bc6a5-9ee6-4ee3-830c-3ebb186102a6",
		"name": "User-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2086778"
	},
	"item": [
		{
			"name": "Get Usuarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the response schema for the presence of required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.data.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('nome');\r",
							"        pm.expect(user).to.have.property('cpf');\r",
							"        pm.expect(user).to.have.property('endereco');\r",
							"        pm.expect(user).to.have.property('email');\r",
							"        pm.expect(user).to.have.property('telefone');\r",
							"        pm.expect(user).to.have.property('dataCadastro');\r",
							"        pm.expect(user).to.have.property('key');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.data).to.be.an('array');\r",
							"  responseData.data.forEach(function(user) {\r",
							"    pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is not valid\");\r",
							"  });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_base}}/usuario",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"usuario"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Usuario-Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"  pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"  });\r",
							"\r",
							"pm.test(\"Verify the response schema for the presence of required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('object').that.is.not.empty;\r",
							"\r",
							"    const user = responseData.data;\r",
							"    pm.expect(user).to.have.property('nome');\r",
							"    pm.expect(user).to.have.property('cpf');\r",
							"    pm.expect(user).to.have.property('endereco');\r",
							"    pm.expect(user).to.have.property('email');\r",
							"    pm.expect(user).to.have.property('telefone');\r",
							"    pm.expect(user).to.have.property('dataCadastro');\r",
							"    pm.expect(user).to.have.property('key');\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('object');\r",
							"    pm.expect(responseData.data.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is not valid\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_base}}/usuario/{{id}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"usuario",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Usuario-CPF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the response schema for the presence of required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('object').that.is.not.empty;\r",
							"\r",
							"    const user = responseData.data;\r",
							"    pm.expect(user).to.have.property('nome');\r",
							"    pm.expect(user).to.have.property('cpf');\r",
							"    pm.expect(user).to.have.property('endereco');\r",
							"    pm.expect(user).to.have.property('email');\r",
							"    pm.expect(user).to.have.property('telefone');\r",
							"    pm.expect(user).to.have.property('dataCadastro');\r",
							"    pm.expect(user).to.have.property('key');\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('object');\r",
							"    pm.expect(responseData.data.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is not valid\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_base}}/usuario/cpf/{{cpf}}?key={{key}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"usuario",
						"cpf",
						"{{cpf}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Usuario-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"  pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"  });\r",
							"\r",
							"pm.test(\"Verify the response schema for the presence of required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('object').that.is.not.empty;\r",
							"\r",
							"    const user = responseData.data;\r",
							"    pm.expect(user).to.have.property('nome');\r",
							"    pm.expect(user).to.have.property('cpf');\r",
							"    pm.expect(user).to.have.property('endereco');\r",
							"    pm.expect(user).to.have.property('email');\r",
							"    pm.expect(user).to.have.property('telefone');\r",
							"    pm.expect(user).to.have.property('dataCadastro');\r",
							"    pm.expect(user).to.have.property('key');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_base}}/usuario/{{id}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"usuario",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Novo-Usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verifica se o response é válido\", function () {\r",
							"    let jsonResponse = pm.response.json();\r",
							"    \r",
							"    // Verifica se o status code está correto (201 ou 409)\r",
							"    pm.expect(jsonResponse.statusCode).to.be.oneOf([201, 409]);\r",
							"\r",
							"    // Caso seja 201 - Deve conter valores para \"dataCadastro\" e \"key\"\r",
							"    if (jsonResponse.statusCode === 201) {\r",
							"        pm.expect(jsonResponse.data).to.have.property(\"dataCadastro\").that.is.not.null;\r",
							"        pm.expect(jsonResponse.data).to.have.property(\"key\").that.is.not.null;\r",
							"        pm.expect(jsonResponse.erros).to.be.an(\"array\").that.is.empty;\r",
							"    }\r",
							"\r",
							"    // Caso seja 409 - \"dataCadastro\" e \"key\" devem ser null e deve haver um erro\r",
							"    if (jsonResponse.statusCode === 409) {\r",
							"        pm.expect(jsonResponse.data).to.have.property(\"dataCadastro\").that.is.null;\r",
							"        pm.expect(jsonResponse.data).to.have.property(\"key\").that.is.null;\r",
							"        pm.expect(jsonResponse.erros).to.be.an(\"array\").that.is.not.empty;\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nome\": \"marcel\",\r\n    \"cpf\": \"06618938635\",\r\n    \"endereco\": \"Rua abc\",\r\n    \"email\": \"marcelpaa@hotmail.com\",\r\n    \"telefone\": \"31998565849\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_base}}/usuario",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"usuario"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Usuario-Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the response schema for the presence of required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.data.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('nome');\r",
							"        pm.expect(user).to.have.property('cpf');\r",
							"        pm.expect(user).to.have.property('endereco');\r",
							"        pm.expect(user).to.have.property('email');\r",
							"        pm.expect(user).to.have.property('telefone');\r",
							"        pm.expect(user).to.have.property('dataCadastro');\r",
							"        pm.expect(user).to.have.property('key');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.data).to.be.an('array');\r",
							"  responseData.data.forEach(function(user) {\r",
							"    pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is not valid\");\r",
							"  });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_base}}/usuario/search?nome={{nome}}",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"usuario",
						"search"
					],
					"query": [
						{
							"key": "nome",
							"value": "{{nome}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get API-Docs",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_base}}/usuarios/v3/api-docs",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"usuarios",
						"v3",
						"api-docs"
					]
				}
			},
			"response": []
		}
	]
}